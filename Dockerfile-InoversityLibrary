# syntax=docker/dockerfile:1

FROM python:3.9-slim

ENV ACCEPT_EULA=Y \
    YOUR_ENV='production' \
    PYTHONFAULTHANDLER=1 \
    PYTHONUNBUFFERED=1 \
    PYTHONHASHSEED=random \
    PIP_NO_CACHE_DIR=off \
    PIP_DISABLE_PIP_VERSION_CHECK=on \
    PIP_DEFAULT_TIMEOUT=100 \
    POETRY_VERSION=1.2.2

# populate "ocbcinst.ini" as this is where ODBC driver config sits
RUN apt-get update && apt-get install -y --no-install-recommends \
        unixodbc \
        unixodbc-dev \
        freetds-dev \
        freetds-bin \
        tdsodbc \
        dos2unix \
        --reinstall build-essential -y \
    && echo "[FreeTDS]\n\
        Description = FreeTDS Driver\n\
        Driver = /usr/lib/x86_64-linux-gnu/odbc/libtdsodbc.so\n\
        Setup = /usr/lib/x86_64-linux-gnu/odbc/libtdsS.so" >> /etc/odbcinst.ini

# install Microsoft SQL Server requirements
RUN apt-get update -y && apt-get install -y --no-install-recommends  \
      curl  \
      gcc  \
      g++  \
      gnupg \
    && curl https://packages.microsoft.com/keys/microsoft.asc | apt-key add - \
    && curl https://packages.microsoft.com/config/debian/10/prod.list > /etc/apt/sources.list.d/mssql-release.list \
    && apt-get update -y \
    && apt-get install -y --no-install-recommends --allow-unauthenticated  \
        msodbcsql17 \
        mssql-tools \
    && echo 'export PATH="$PATH:/opt/mssql-tools/bin"' >> ~/.bash_profile \
    && echo 'export PATH="$PATH:/opt/mssql-tools/bin"' >> ~/.bashrc \
    && apt-get update \
    && apt-get -y clean all

RUN pip install "poetry==$POETRY_VERSION"

WORKDIR /app

COPY poetry.lock pyproject.toml /app/

RUN poetry config virtualenvs.create false \
  && poetry install $(test "$YOUR_ENV" == production && echo "--no-dev") --no-interaction --no-ansi \
  && apt-get remove -y gcc && apt-get -y autoremove

COPY . .

RUN chmod +x ./entry_point.sh

RUN ["dos2unix", "entry_point.sh"]

CMD [ "./entry_point.sh"]
