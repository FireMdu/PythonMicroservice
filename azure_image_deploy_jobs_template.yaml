parameters:
  preBuild: []
  postBuild: []
  environment: ''
  environmentAlias: ''
  baseDeployImageTag: ''

jobs:
- deployment: ${{parameters.environment}}
  displayName: 'Deploy to ${{parameters.environment}}'
  environment: ${{parameters.environment}}
  strategy:
    runOnce:
      deploy:
        pool:
          vmImage: ubuntu-latest
        steps:
        - ${{ parameters.preBuild }}
        
        - download: none

        - task: DownloadPipelineArtifact@2
          displayName: 'Download config template artifact'
          inputs:
            path: '$(Build.StagingDirectory)'
            artifactName: '$(configTemplateArtifactName)'

        - task: PowerShell@2
          displayName: 'Rename config template'
          inputs:
            targetType: 'inline'
            script: Rename-Item ./global_configuration_template.json ./global_configuration.json
            workingDirectory: '$(Build.StagingDirectory)'
            pwsh: true

        - task: FileTransform@1
          displayName: 'Substitute config template variables'
          inputs:
            folderPath: '$(Build.StagingDirectory)'
            targetFiles: 'global_configuration.json'
            fileType: 'json'
            
        - task: CopyFiles@2
          displayName: 'Relocate files to source directory'
          inputs:
            sourceFolder: '$(Build.StagingDirectory)'
            contents: '**'
            targetFolder: '$(Build.SourcesDirectory)'

        - task: PowerShell@2
          displayName: 'Write base image extension Dockerfile'
          inputs:
            targetType: 'inline'
            script: |
              $dockerfile = '#syntax=docker/dockerfile:1

              FROM $(containerRegistryLoginServer)/$(imageName):${{ parameters.baseDeployImageTag }}

              COPY ./global_configuration.json ./global_configuration.json

              EXPOSE 8000
              
              CMD ["./entry_point.sh"]
              '
              $dockerfile | Out-File $(upperLayersDockerfileName)
            workingDirectory: '$(Build.SourcesDirectory)'
            pwsh: true

        - task: Docker@2
          displayName: 'Build & push `$(imageName)` image to CR'
          inputs:
            containerRegistry: '$(containerRegistryServiceConnectionName)'
            repository: '$(imageName)'
            command: 'buildAndPush'
            Dockerfile: '$(upperLayersDockerfileName)'
            tags: |
              $(${{parameters.environmentAlias}}ImageTag)
              $(${{parameters.environmentAlias}}LatestImageTag)

        - ${{ parameters.postBuild }}
